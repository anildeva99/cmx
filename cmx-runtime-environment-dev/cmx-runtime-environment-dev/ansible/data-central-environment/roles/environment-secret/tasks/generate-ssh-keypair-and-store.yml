---
- name: "Lookup public key in AWS secret manager to see
    if need to generate new ones"
  set_fact:
    aws_secret_public_key_value : "{{ lookup('aws_secret',
      '{{ aws_secret_private_key_var }}.pub',
      errors='ignore',
      region=region) }}"
  register: aws_secret_public_key_returned_value

- name: Generate ssh keypair
  community.crypto.openssh_keypair:
    path: "{{ aws_secret_private_key_path_var }}"
    size: 4096
    state: "{{ state }}"
    type: rsa
  register: aws_secret_keypair
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

- name: Load private key content into variable for next step
  slurp:
    src: "{{ aws_secret_private_key_path_var }}"
  register: slurped_aws_seceret_keypair_data
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

- name: Store private keys in secret manager if it is new
  community.aws.aws_secret:
    name: '{{ aws_secret_private_key_var }}'
    region: "{{ region }}"
    secret_type: 'string'
    secret: "{{ slurped_aws_seceret_keypair_data.content | b64decode }}"
    state: present
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

- name: Store public keys in secret manager if it is new
  community.aws.aws_secret:
    name: '{{ aws_secret_private_key_var }}.pub'
    region: "{{ region }}"
    secret_type: 'string'
    secret: "{{ aws_secret_keypair.public_key }}"
    state: present
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

- name: Delete private key file (it will be pull down when it is needed)
  file:
    path: "{{ aws_secret_private_key_path_var }}"
    state: absent
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

- name: Delete  public key file
  file:
    path: "{{ aws_secret_private_key_path_var }}.pub"
    state: absent
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)

# TODO: [DEVOPS-388] Replace ansible pause with until loop
- name: "Wait until secret is available after private/public keys are uploaded
    (sometimes the secret is not available immediately after saving)"
  pause:
    seconds: 5
  when: (aws_secret_public_key_returned_value is succeeded) and
        (aws_secret_public_key_value
          == aws_secret_manager_secret_key_initial_value)
