---
# Override with the application environment
env: "{{ env }}"

environment_dns_name: "{{ env }}.codametrix.com"
environment_www_dns_address: "www.{{ environment_dns_name }}"
application_env_dns_name: "{{ env }}.application.codametrix.com"
application_static_dns_address: "static.{{ application_env_dns_name }}"
application_api_dns_address: "api.{{ application_env_dns_name }}"
application_ingress_dns_address: "ingress.{{ application_env_dns_name }}"
application_www_dns_address: "www.{{ application_env_dns_name }}"
application_public_whitelist_www_dns_address: "www-public-whitelisted.{{ application_env_dns_name }}"
application_mirthconnect_dns_address: "mirth.{{ application_env_dns_name }}"
ingress_ssh_dns_address: "ingress-ssh.{{ application_env_dns_name }}"
ingress_nlb_dns_address: "ingress-nlb.{{ application_env_dns_name }}"
ingress_mirthconnect_dns_address: "ingress-mirth.{{ application_env_dns_name }}"

eks_cluster_name: "CodaMetrixApplication-{{ env }}-eks_cluster"

# Cluster system plugin version(s)
kube_proxy_version: "1.16.15"
coredns_version: "1.6.6"
cni_version: "1.7.5"

# Image Pull Policy Defaults
cmx_monitor_service_spring_profile: dev
cmx_monitor_service_image_pull_policy: Always

# Monitor Service Defaults
monitor_service_min_container_memory: "512Mi"
monitor_service_max_container_memory: "1Gi"
monitor_service_min_heap_size: "512m"
monitor_service_max_heap_size: "1g"
monitor_service_min_cpus: "500m"
monitor_service_max_cpus: 1
monitor_service_additional_dbs:
  - 'userservice'
  - 'caseservice'

###############################
# Application service resources
###############################
case_builder_service_min_container_memory: "1Gi"
case_builder_service_max_container_memory: "2Gi"
case_builder_service_min_heap_size: "512m"
case_builder_service_max_heap_size: "1g"
case_builder_service_min_cpus: "500m"
case_builder_service_max_cpus: 2

claim_service_min_container_memory: "512Mi"
claim_service_max_container_memory: "1Gi"
claim_service_min_heap_size: "256m"
claim_service_max_heap_size: "1g"
claim_service_min_cpus: "500m"
claim_service_max_cpus: 1

configuration_service_min_container_memory: "512Mi"
configuration_service_max_container_memory: "1Gi"
configuration_service_min_heap_size: "256m"
configuration_service_max_heap_size: "1g"
configuration_service_min_cpus: "500m"
configuration_service_max_cpus: 1

dashboard_ui_min_container_memory: "64Mi"
dashboard_ui_max_container_memory: "128Mi"
dashboard_ui_min_cpus: "100m"
dashboard_ui_max_cpus: 1

dictionary_service_min_container_memory: "512Mi"
dictionary_service_max_container_memory: "1Gi"
dictionary_service_min_heap_size: "256m"
dictionary_service_max_heap_size: "1g"
dictionary_service_min_cpus: "500m"
dictionary_service_max_cpus: 1

documentation_service_min_container_memory: "512Mi"
documentation_service_max_container_memory: "1Gi"
documentation_service_min_heap_size: "256m"
documentation_service_max_heap_size: "1g"
documentation_service_min_cpus: "500m"
documentation_service_max_cpus: 1

event_dispatcher_service_min_container_memory: "512Mi"
event_dispatcher_service_max_container_memory: "1Gi"
event_dispatcher_service_min_heap_size: "256m"
event_dispatcher_service_max_heap_size: "1g"
event_dispatcher_service_min_cpus: "500m"
event_dispatcher_service_max_cpus: 1

importer_service_min_container_memory: "512Mi"
importer_service_max_container_memory: "1Gi"
importer_service_min_heap_size: "256m"
importer_service_max_heap_size: "1g"
importer_service_min_cpus: "500m"
importer_service_max_cpus: 1

exporter_service_min_container_memory: "512Mi"
exporter_service_max_container_memory: "1Gi"
exporter_service_min_heap_size: "256m"
exporter_service_max_heap_size: "1g"
exporter_service_min_cpus: "500m"
exporter_service_max_cpus: 1

order_service_min_container_memory: "512Mi"
order_service_max_container_memory: "1Gi"
order_service_min_heap_size: "256m"
order_service_max_heap_size: "1g"
order_service_min_cpus: "500m"
order_service_max_cpus: 1

patient_service_min_container_memory: "512Mi"
patient_service_max_container_memory: "1Gi"
patient_service_min_heap_size: "256m"
patient_service_max_heap_size: "1g"
patient_service_min_cpus: "500m"
patient_service_max_cpus: 1

user_service_min_container_memory: "500Mi"
user_service_max_container_memory: "1Gi"
user_service_min_heap_size: "256m"
user_service_max_heap_size: "1g"
user_service_min_cpus: "500m"
user_service_max_cpus: 2

process_service_min_container_memory: "1Gi"
process_service_max_container_memory: "2Gi"
process_service_min_heap_size: "512m"
process_service_max_heap_size: "1g"
process_service_min_cpus: "500m"
process_service_max_cpus: 2

mu_sagemaker_service_min_container_memory: "512Mi"
mu_sagemaker_service_max_container_memory: "1Gi"
mu_sagemaker_service_min_heap_size: "512m"
mu_sagemaker_service_max_heap_size: "1g"
mu_sagemaker_service_min_cpus: "500m"
mu_sagemaker_service_max_cpus: 1

mirth_min_container_memory: "512Mi"
mirth_max_container_memory: "2Gi"
mirth_min_heap_size: "512m"
mirth_max_heap_size: "1536m"
mirth_min_cpus: "500m"
mirth_max_cpus: 2

#Recovery Window for AWS Secrets
aws_secrets_recovery_window_in_days: 30
aws_secret_manager_secret_key_initial_value: INITIAL

#Dynamic Resources
create_es_service_linked_role: true

#Process Service Bucket
process_data_bucket: "process-data.{{ env }}.app.codametrix.com"
process_data_bucket_root: "casedata"

# Process Service Config
process_service_endpoint_path: rest

# Mu Task execution role
mu_default_task_execution_role: "CodaMetrixApplication-{{ env }}-mu_default_task_execution_role"

# Process Data bucket
process_data_bucket_key_alias: "alias/CodaMetrixApplication-{{ env }}-process_data_bucket_key"

# Mu Job data bucket
mu_job_data_bucket: "job-data.{{ env }}.mu.codametrix.com"
mu_job_manifest_bucket: "job-manifest.tools.mu.codametrix.com"
mu_job_manifest_kms_key_alias: "arn:aws:kms:us-east-1:{{ codametrix_tools_account_id }}:alias/kms/s3/job-manifest"
mu_mapping_environment: development

# Temporary directory
temp_directory: "{{ lookup('env','HOME') }}/.codametrix/{{ env }}/tmp/"

# Which branch to get the service versions from
deploy_config_branch: master

# enable some apis that are environment specific
test_api_enabled_environments:
  - qa1
  - development
  - sandbox

# Generate temproray RDS/ES passwords
database_temporary_password: "{{ lookup('randpass', '32', uppercase=10,
  lowercase=10, digits=10) }}"
temp_elasticache_password: "{{ lookup('randpass', '32', uppercase=10,
  lowercase=10, digits=10) }}"

jwt_key_initial_value: INITIAL

application_logs_bucket: "logs.{{env}}.application.codametrix.com"
application_database_identifier: "codametrixapplication-{{ env }}-application-db"
application_secrets_kms_key_alias: "alias/CodaMetrixApplication-{{ env }}-application_secrets_key"
application_data_warehouse_identifier: "codametrixapplication-{{ env }}-application-dw"

elasticache_cluster_id: "{{ env }}-redis"
elasticache_rg_id: "{{ env }}-rg"

application_elasticsearch_domain: "cmx-{{ env }}-es-domain"

bastion_host_ubuntu_private_key: "bastion-host-{{ env }}-ubuntu-id_ssh_rsa"
bastion_host_ubuntu_private_key_path: "{{ temp_directory }}/{{ bastion_host_ubuntu_private_key }}"
aws_secret_bastion_host_ubuntu_private_key: "CodaMetrixApplication/BastionHost/{{ bastion_host_ubuntu_private_key }}"
bastion_host_bastion_private_key: "bastion-host-{{ env }}-bastion-id_ssh_rsa"
bastion_host_bastion_private_key_path: "{{ temp_directory }}/{{ bastion_host_bastion_private_key }}"
aws_secret_bastion_host_bastion_private_key: "CodaMetrixApplication/BastionHost/{{ bastion_host_bastion_private_key }}"
cluster_bastion_host_private_key: "cluster-bastion-{{ env }}-bastion-id_ssh_rsa"
aws_secret_cluster_bastion_host_private_key: "CodaMetrixApplication/ClusterBastion/{{ cluster_bastion_host_private_key }}"

public_key_suffix: "id_ssh_rsa.pub"

sns_topics:
  event_topic:
    name: "CodaMetrixApplication-{{ env }}-event_topic"
    display_name: "CodaMetrixApplication {{ env }} event_topic"
  high_priority_alarm_topic:
    name: "CodaMetrixApplication-{{ env }}-high_priority_alarm_topic"
    display_name: "CodaMetrixApplication {{ env }} high_priority_alarm_topic"
  medium_priority_alarm_topic:
    name: "CodaMetrixApplication-{{ env }}-medium_priority_alarm_topic"
    display_name: "CodaMetrixApplication {{ env }} medium_priority_alarm_topic"
  low_priority_alarm_topic:
    name: "CodaMetrixApplication-{{ env }}-low_priority_alarm_topic"
    display_name: "CodaMetrixApplication {{ env }} low_priority_alarm_topic"

sqs_queues:
  caseevents_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-caseevents_queue"
    deadletter_queue_name: "CodaMetrixApplication-{{ env }}-caseevents_deadletter_queue"
    max_receive_count: 5
  casebuilder_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-casebuilder_queue"
    deadletter_queue_name: "CodaMetrixApplication-{{ env }}-casebuilder_deadletter_queue"
    max_receive_count: 5
  activitylog_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-activitylog_queue"
  munotification_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-munotification_queue"
  externaltaskmonitor_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-externaltaskmonitor_queue"
  charge_processor_queue:
    queue_name: "CodaMetrixApplication-{{ env }}-charge_processor_queue"
    deadletter_queue_name: "CodaMetrixApplication-{{ env }}-charge_processor_deadletter_queue"
    max_receive_count: 5

tomcat_db_connection_pool:
  db_initial_size: 15
  db_max_wait: 30000
  db_max_active: 150
  db_max_idle: 30
  db_min_idle: 8

application_sns_topic_kms_key_alias: "alias/CodaMetrixApplication-{{ env }}-application_sns_topic_key"
application_sqs_queue_kms_key_alias: "alias/CodaMetrixApplication-{{ env }}-application_sqs_queue_key"

service_roles:
  caseservice: "CodaMetrixApplication-{{ env }}-caseservice_role"
  claimservice: "CodaMetrixApplication-{{ env }}-claimservice_role"
  configurationservice: "CodaMetrixApplication-{{ env }}-configurationservice_role"
  dashboardui: "CodaMetrixApplication-{{ env }}-dashboardui_role"
  dictionaryservice: "CodaMetrixApplication-{{ env }}-dictionaryservice_role"
  documentationservice: "CodaMetrixApplication-{{ env }}-documentationservice_role"
  eventdispatcherservice: "CodaMetrixApplication-{{ env }}-eventdispatcherservice_role"
  importerservice: "CodaMetrixApplication-{{ env }}-importerservice_role"
  orderservice: "CodaMetrixApplication-{{ env }}-orderservice_role"
  patientservice: "CodaMetrixApplication-{{ env }}-patientservice_role"
  userservice: "CodaMetrixApplication-{{ env }}-userservice_role"
  processservice: "CodaMetrixApplication-{{ env }}-processservice_role"
  musagemakerservice: "CodaMetrixApplication-{{ env }}-musagemakerservice_role"
  exporterservice: "CodaMetrixApplication-{{ env }}-exporterservice_role"
  monitorservice: "CodaMetrixApplication-{{ env }}-monitorservice_role"

cmx_java_service_jmx_port_number: 9998

application_worker_node_instance_role: "CodaMetrixApplication-{{ env }}-eks_node_instance_role"
kubernetes_external_secrets_role: "CodaMetrixApplication-{{ env }}-k8s_ext_secrets_role"
ecr_cred_helper_role: "CodaMetrixApplication-{{ env }}-ecr_cred_helper_role"
fluentd_role: "CMXApp-{{ env }}-fluentd_role"
aws_alb_ingress_controller_role: "CodaMetrixApplication-{{ env }}-alb_ingress_controller_role"
certmanager_role: "CodaMetrixApplication-{{ env }}-certmanager_role"
redshift_role: "CodaMetrixApplication-{{ env }}-redshift_role"
cluster_autoscaler_service_role: "CodaMetrixApplication-{{ env }}-autoscaler_role"

cluster_bastion_private_key_path: "{{ temp_directory }}/{{ cluster_bastion_host_private_key }}"
cluster_bastion_dns_address: "clusterbastion.{{ application_env_dns_name }}"

customer_networking_key_name: "codametrixapplication-{{ env }}-customer-networking"
customer_networking_private_key: "customer-vpn-{{ env }}-id_ssh_rsa"
customer_networking_private_key_path: "{{ temp_directory }}/{{ customer_networking_private_key }}"
aws_secret_customer_networking_private_key: "CodaMetrixApplication/CustomerNetworking/{{ customer_networking_private_key }}"
customer_networking_csr_1_login_username: ec2-user

restart_ingress_mirth: false
ingress_mirth_key_name: "codametrixapplication-{{ env }}-ingress-mirth"
ingress_mirth_ubuntu_private_key: "ingress-mirth-{{ env }}-ubuntu-id_ssh_rsa"
ingress_mirth_ubuntu_private_key_path: "{{ temp_directory }}/{{ ingress_mirth_ubuntu_private_key }}"
aws_secret_ingress_mirth_ubuntu_private_key: "CodaMetrixApplication/IngressMirth/{{ ingress_mirth_ubuntu_private_key }}"
ingress_mirth_login_username: ubuntu

worker_node_key_name: "codametrixapplication-{{ env }}-worker-node"
worker_node_private_key: "worker-node-{{ env }}-id_ssh_rsa"
worker_node_private_key_path: "{{ temp_directory }}/{{ worker_node_private_key }}"
aws_secret_worker_node_private_key: "CodaMetrixApplication/WorkerNode/{{ worker_node_private_key }}"
data_lake_emr_host_key_name: "codametrixapplication-{{ env }}-data-lake-emr-host"
data_lake_emr_host_private_key: "data-lake-emr-host-{{ env }}-id_ssh_rsa"
data_lake_emr_host_private_key_path: "{{ temp_directory }}/{{ data_lake_emr_host_private_key }}"
aws_secret_data_lake_emr_host_private_key: "CodaMetrixApplication/DataLake/{{ data_lake_emr_host_private_key }}"

bastion_host_key_name: "codametrixapplication-{{ env }}-bastion-host"

application_database_subnet_group_name: "codametrixapplication-{{ env }}-application_db_subnet_group"
application_data_warehouse_subnet_group_name: "codametrixapplication-{{ env }}-application-dw-subnet-group"

mirth_database_identifier: "codametrixapplication-{{ env }}-mirth-db"
mirth_database_subnet_group_name: "codametrixapplication-{{ env }}-mirth_db_subnet_group"
mirth_role_name: "CodaMetrixApplication-{{ env }}-mirth_role"
mirth_database_kms_key_alias: "alias/CodaMetrixApplication-{{ env }}-mirth_database_key"
mirth_database_parameter_group: "codametrixapplication-{{ env }}-mirth-parameter-group"
mirth_database_secrets_usage_policy_name: "CodaMetrixApplication-{{ env }}-mirth_database_secrets_usage_policy"
mirth_database_secret_name: "CodaMetrixApplication/Mirth/{{ env }}"
mirth_database_admin_secret_name: "CodaMetrixApplication/MirthDatabaseAdmin/{{ env }}"
mirth_database_security_group_name: "CodaMetrixApplication-{{env}}-mirth_database_sg"
mirth_rds_enhanced_monitoring_role_name: "CMxApp-{{ env }}-mirth-rds-enhanced-monitoring"

ingress_mirth_database_secrets_usage_policy_name: "CodaMetrixApplication-{{ env }}-ingress_mirth_database_secrets_usage_policy"
ingress_mirth_database_identifier: "codametrixapplication-{{ env }}-ingress-mirth-db"
ingress_mirth_role_name: "CodaMetrixApplication-{{ env }}-ingress_mirth_role"
ingress_mirth_database_subnet_group_name: "codametrixapplication-{{ env }}-ingress_mirth_db_subnet_group"
ingress_mirth_database_kms_key_alias: "alias/CodaMetrixApplication-{{ env }}-ingress_mirth_database_key"
ingress_mirth_database_parameter_group: "codametrixapplication-{{ env }}-ingress-mirth-parameter-group"
ingress_mirth_database_secret_name: "CodaMetrixApplication/IngressMirth/{{ env }}"
ingress_mirth_database_admin_secret_name: "CodaMetrixApplication/IngressMirthDatabaseAdmin/{{ env }}"
ingress_mirth_database_security_group_name: "CodaMetrixApplication-{{env}}-ingress-mirth_database_sg"
ingress_mirth_rds_enhanced_monitoring_role_name: "CMxApp-{{ env }}-in-mirth-rds-enhanced-monitoring"

acl_constraint_body_size: 25600 # 25K, for imports.
acl_constraint_cookie_size: 4093
acl_constraint_query_string_size: 1024
acl_constraint_uri_size: 512
web_admin_url: "/admin"
acl_constraint_match_auth_tokens: .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
acl_constraint_session_id: example-session-id

# URL paths and prefixes
dictionary_v1_url_path: dictionary/v1
cpt_dictionary_list_url_path: cpt/list/v1
modifier_dictionary_list_url_path: modifier/list/v1
codemap_dictionary_list_url_path: codemap/list/v1
codes_description_list_url_path: codes/description/v1
security_check_url_path: j_spring_security_check
hl7_orm_o01_import_url_path: hl7/ORMO01/v1
hl7_oru_r01_import_url_path: hl7/ORUR01/v1
hl7_adt_a01_import_url_path: hl7/ADTA01/v1
hl7_adt_a02_import_url_path: hl7/ADTA02/v1
hl7_adt_a03_import_url_path: hl7/ADTA03/v1
hl7_adt_a04_import_url_path: hl7/ADTA04/v1
hl7_adt_a05_import_url_path: hl7/ADTA05/v1
hl7_adt_a06_import_url_path: hl7/ADTA06/v1
hl7_adt_a07_import_url_path: hl7/ADTA07/v1
hl7_adt_a08_import_url_path: hl7/ADTA08/v1
hl7_adt_a18_import_url_path: hl7/ADTA18/v1
hl7_adt_a28_import_url_path: hl7/ADTA28/v1
hl7_adt_a29_import_url_path: hl7/ADTA29/v1
hl7_adt_a31_import_url_path: hl7/ADTA31/v1
hl7_adt_a40_import_url_path: hl7/ADTA40/v1
hl7_adt_a41_import_url_path: hl7/ADTA41/v1
hl7_adt_a45_import_url_path: hl7/ADTA45/v1
hl7_adt_a47_import_url_path: hl7/ADTA47/v1
hl7_dft_p03_import_url_path: hl7/DFTP03/v1
dundas_credential_path: dundas/credentials/v1
dundas_token_path: dundas/token/v1
file_import_url_path: fileimport/v1
login_url_path: login
logout_url_path: logout
document_import_url_path: documents/upload/v1
case_builder_metadata_source_url_path: metadata/source/v1
user_config_path: user/config/v1

user_url_path_prefix: users
contexts_url_path_prefix: contexts
role_url_path_prefix: roles
case_instance_url_path_prefix: caseinstance
case_builder_filter_url_path_prefix: casebuilder/filter
case_builder_metadata_association_url_path_prefix: metadata/association-group
case_builder_metadata_definition_url_path_prefix: metadata/definition
process_instance_url_path_prefix: processinstance
primary_assigning_authority_url_path_prefix: primaryAssigningAuthority
hl7_adt_ax_import_url_path_prefix: hl7/ADTA
hl7_dft_px_import_url_path_prefix: hl7/DFTP
dictionary_url_path_prefix: dictionary
dictionary_cpt_url_path_prefix: cpt
dictionary_modifier_url_path_prefix: modifier

# URL paths and prefixes that are environment specific
orders_url_path_prefix: orders
patient_url_path_prefix: patient
encounter_url_path_prefix: encounter
documents_url_path_prefix: documents
organization_url_path_prefix: organization
userpreference_url_path_prefix: userpreference
configuration_url_path_prefix: configuration
resource_url_path_prefix: resource
security_url_path_prefix: security
tenant_url_path_prefix: tenant
destination_url_path_prefix: destination
export_url_path_prefix: export

cmx_api_public_whitelist: []

# images for k8s autoscaling
cluster_autoscaler_image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.16.7
cluster_autoscaler_image_label: k8s.gcr.io-cluster-autoscaler-v1.16.7

# For horizontal pod autoscaler
hpa_cpu_resource_average_utilization: 80

# For Kafka Cluster
kafka_version: 2.2.1
msk_instance_type: kafka.t3.small
number_of_kafka_broker_nodes: 2
msk_ebs_volume_size: 10
msk_private_subnet_cidr_block:
  - "{{ ip_range_prefix }}.7.0/24"
  - "{{ ip_range_prefix }}.4.0/24"

######################
# Application features
######################

# Process Service
process_service_activity_evidence_enabled: false
process_service_decision_evidence_enabled: false

##############
# EMR Settings
##############
emr_release_label: emr-5.31.0
emr_instance_profile: EMR_EC2_DefaultRole
emr_master_volume_type: gp2
emr_master_instance_type: m6g.xlarge
emr_master_instance_group_name: EMR_MASTER
emr_core_instance_count_min: 1
emr_core_instance_count_max: 1
emr_core_volume_size_in_gb: 20
emr_core_volume_type: gp2
emr_core_instance_type: m6g.xlarge
emr_core_instance_group_name: EMR_CORE
emr_ebs_root_volume_size: 20

sns_source_addresses:
  - 24.62.104.250/32
  - 207.171.167.25/32
  - 54.240.217.8/29
  - 72.21.196.64/29
  - 72.21.198.64/29
  - 54.240.217.16/29
  - 54.239.98.0/24
  - 207.171.167.101/32
  - 207.171.167.26/32
  - 72.21.217.0/24
  - 54.240.217.80/29
  - 54.240.217.64/28
  - 207.171.172.6/32
  - 205.251.233.160/28
  - 205.251.233.176/29
  - 205.251.233.32/28
  - 205.251.233.48/29
  - 205.251.234.32/28
  - 54.240.230.176/29
  - 54.240.230.240/29

emr_subnet_cidr_block: "{{ ip_range_prefix }}.5.0/24"
kafka_case_event_topic: case_events
kafka_data_change_event_topic: data_change_events
kafka_hipaa_event_topic: hipaa_events
kafka_avail_zone_distribution: "DEFAULT"
kafka_enhanced_monitoring: "DEFAULT"
emr_spark_certs_file_path: /tmp/emr_spark_certs.zip

app_vpc_flow_log_group_name: "CodaMetrixApp-{{ env }}-VPCFlowLogGroup"
app_vpc_flow_log_traffic_type: ALL
ingress_vpc_flow_log_group_name: "CodaMetrixIngress-{{ env }}-VPCFlowLogGroup"
ingress_vpc_flow_log_traffic_type: ALL

aws_inspector_enabled: true
inspector_schedule_expression: "cron(0 14 ? * THU *)" # Run every Thursday at 2PM UTC/9AM EST/10AM EDT
inspector_assessment_duration: "3600" # 1 hour
ruleset_cve: true
ruleset_cis: true
ruleset_security_best_practices: true
ruleset_network_reachability: true
inspector_enable_scheduled_event: true
aws_inspector_ruleset_region: "{{ region }}"
aws_ruleset_account_id: "316112463485"
aws_ruleset_cve_id: "0-gEjTy7T7"
aws_ruleset_cis_id: "0-rExsr2X8"
ruleset_security_best_practices_id: "0-R01qwB5Q"
ruleset_network_reachability_id: "0-PmNV0Tcd"

guardduty_detector_enable: true
is_guardduty_member: true
guardduty_master_account_id: "{{ codametrix_tools_account_id }}"
emr_bootstrap_action_name: emr_cluster_installing_aws_inspector_agent
emr_bootstrap_script_file_path: scripts/emr_bootstrap_script.sh

# Security Hub
is_securityhub_account: false
aws_foundations_securityhub_standards_subscription_arn: "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"
aws_securityhub_product_subscription_arn: "arn:aws:securityhub:{{ region }}:733251395267:product/alertlogic/althreatmanagement"

# New Relic parameters
is_new_relic_logging_enabled: true
new_relic_temporary_license_key: "INITIAL"

# Dundas configuration
dundas_enabled: false
dundas_server_url: "https://example.com/"
dundas_dashboard_url: "/dundasbi/"
dundas_filesystem_id: "empty"

############################################################
#  CloudWatch-> Kinesis/Firehose-> Elastic Search Pipeline
############################################################
log_subscription_filter_distribution: "Random"
kinesis_rentention_period: 24
kinesis_stream_kms_key_alias: "alias/aws/kinesis"

firehose_cloudwatch_log_retention: 7

firehose_lambda_runtime_type: "python2.7"
firehose_lambda_function_timeout: 300
firehose_elasticsearch_configuration_buffering_interval: 60
firehose_elasticsearch_configuration_buffering_size: 1
firehose_s3_backup_bucket_configuration_buffering_interval: 60
firehose_s3_backup_bucket_configuration_buffering_size: 2
firehose_s3_backup_bucket_configuration_prefix: "cw_ingest_to_es_by_firehose-"
firehose_s3_config_cloudwatch_logging_options_enabled: true
firehose_s3_config_cloudwatch_logging_options_log_group_name: "kinesis_firehose"
firehose_s3_config_cloudwatch_logging_options_log_stream_name: "kinesis_firehose"
firehose_elasticsearch_configuration_s3_backup_mode: "FailedDocumentsOnly"
firehose_elasticsearch_configuration_index_rotation_period: "OneDay"
firehose_record_lambda_func_processing_configuration_enabled: true
firehose_record_processors_type: "Lambda"
firehose_processor_parameter_name: "LambdaArn"

####################
#  CloudWatch Alarms
####################
free_storage_metrix_name: FreeStorageSpace
percentage_disk_space_used_metrix_name: PercentageDiskSpaceUsed
less_than_or_equal_to_comparison_operator: LessThanOrEqualToThreshold
greater_than_comparison_operator: GreaterThanThreshold
statistic_period: 60
treat_missing_data:
  missing: missing
  ignore: ignore
  breaching: breaching
  notBreaching: notBreaching

# In terraform we cannot mix string and map as element of map,
# and I don't want to repeat them in
# each set of parameter in alarms, so single them out.
cloudwatch_alarm_namespace:
  ec2: AWS/EC2
  elastic_search: AWS/ES
  emr: AWS/ElasticMapReduce
  msk: AWS/Kafka
  rds: AWS/RDS
  redshift: AWS/Redshift
  sqs: AWS/SQS

# By default, set thresholds for Ingress Mirth and the VPN to 0
ingress_mirth_alarms_enabled: false
ingress_mirth_liveness_threshold: 0
ingress_mirth_network_throughput_threshold: 0
customer_networking_csr_1_liveness_threshold: 0
customer_networking_csr_1_network_throughput_threshold: 0

# By default, set all queues to alert if they exceed 1000
# messages for 30 minutes
activitylog_queue_alarm_count_threshold: 1000
activitylog_queue_alarm_minutes: 30
casebuilder_queue_alarm_count_threshold: 1000
casebuilder_queue_alarm_minutes: 30
casebuilder_deadletter_queue_alarm_count_threshold: 1
casebuilder_deadletter_queue_alarm_minutes: 5
caseevents_queue_alarm_count_threshold: 1000
caseevents_queue_alarm_minutes: 30
caseevents_deadletter_queue_alarm_count_threshold: 1
caseevents_deadletter_queue_alarm_minutes: 5
charge_processor_queue_alarm_count_threshold: 1000
charge_processor_queue_alarm_minutes: 30
charge_processor_deadletter_queue_alarm_count_threshold: 1
charge_processor_deadletter_queue_alarm_minutes: 5
externaltaskmonitor_queue_alarm_count_threshold: 1000
externaltaskmonitor_queue_alarm_minutes: 30
munotification_queue_alarm_count_threshold: 1000
munotification_queue_alarm_minutes: 30

# By default, set MSK broker to alert if it's root disk usage exceeds 75%
datawarehouse_msk_broker_disk_use_threshold: 75

######################
#  Liquibase
######################
liquibase_dictionary_contexts: "schema,base,data,audit,PHS,{{ env }}"
liquibase_user_contexts: "schema,base,data,audit,PHS,{{ env }}"
liquibase_configuration_contexts: "schema,base,data,audit,PHS,{{ env }}"
liquibase_casebuilder_contexts: "schema,base,data,audit,PHS,{{ env }}"


########################
#  AWS KMS key rotation
########################
enable_key_rotation: true

###################################################
#  Traffic from application mirth to Ingress mirth
###################################################
app_mirth_to_ingress_mirth_open_ports:
  - 7881 # Dummy test ports 1
  - 7882 # Dummy test ports 1

###################################################
#  Default values of parameters for Fluent pod
###################################################
fluentd_buffer_flush_thread_count: 16
fluentd_buffer_queue_limit_length: 64
fluentd_buffer_chunk_limit_size: "2M"
fluentd_buffer_flush_interval: "3s"

# Cross account data lake bucket to be accessed
cross_account_data_lake_bucket: []

##############################
# Security groups
##############################
# By default allow access to the application network bastion from the
# CodaMetrix Tools VPN
application_bastion_ingress_from_cidr_sgs: []
application_bastion_ingress_from_sg_sgs:
  - description: Allow SSH access from the CodaMetrix Tools VPN
    from_port: "22"
    to_port: "22"
    protocol: tcp
    source_security_group_id: "{{ codametrix_tools_vpn_sg }}"
  - description: Allow proxy connections for Cognito from the CodaMetrix Tools VPN
    from_port: "10000"
    to_port: "10050"
    protocol: tcp
    source_security_group_id: "{{ codametrix_tools_vpn_sg }}"

# By default allow access to the ingress network bastion from the
# CodaMetrix Tools VPN
ingress_bastion_ingress_from_cidr_sgs: []
ingress_bastion_ingress_from_sg_sgs:
  - description: Allow SSH access from the CodaMetrix Tools VPN
    from_port: "22"
    to_port: "22"
    protocol: tcp
    source_security_group_id: "{{ codametrix_tools_vpn_sg }}"
  - description: Allow proxy connections for Cognito from the CodaMetrix Tools VPN
    from_port: "10000"
    to_port: "10050"
    protocol: tcp
    source_security_group_id: "{{ codametrix_tools_vpn_sg }}"

# By default allow access to the CMX Automate ALB from the
# CodaMetrix Tools network and ingress network
cmx_automate_ingress_from_sg_sgs: []
cmx_automate_ingress_from_cidr_sgs:
  - description: Allow HTTPS from the CodaMetrix Tools network
    from_port: "443"
    to_port: "443"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTP from the CodaMetrix Tools network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTPS from the ingress network
    from_port: "443"
    to_port: "443"
    protocol: tcp
    cidr_blocks:
      - "{{ ingress_ip_range_prefix }}.0.0/16"
  - description: Allow HTTP from the ingress network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ ingress_ip_range_prefix }}.0.0/16"

# By default allow access to the application ALB from the
# CodaMetrix Tools network and ingress network
application_cmx_api_ingress_from_sg_sgs: []
application_cmx_api_ingress_from_cidr_sgs:
  - description: Allow HTTPS from the CodaMetrix Tools network
    from_port: "443"
    to_port: "443"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTP from the CodaMetrix Tools network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTPS from the ingress network
    from_port: "443"
    to_port: "443"
    protocol: tcp
    cidr_blocks:
      - "{{ ingress_ip_range_prefix }}.0.0/16"
  - description: Allow HTTP from the ingress network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ ingress_ip_range_prefix }}.0.0/16"

# By default allow access to the application mirth connect ALB from the
# CodaMetrix Tools network
application_mirth_connect_api_ingress_from_sg_sgs: []
application_mirth_connect_api_ingress_from_cidr_sgs:
  - description: Allow HTTPS from the CodaMetrix Tools network
    from_port: "8443"
    to_port: "8443"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTP from the CodaMetrix Tools network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"

# By default allow access to the ingress mirth connect ALB from the
# CodaMetrix Tools network
ingress_mirth_connect_api_ingress_from_sg_sgs: []
ingress_mirth_connect_api_ingress_from_cidr_sgs:
  - description: Allow HTTPS from the CodaMetrix Tools network
    from_port: "8443"
    to_port: "8443"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"
  - description: Allow HTTP from the CodaMetrix Tools network
    from_port: "80"
    to_port: "80"
    protocol: tcp
    cidr_blocks:
      - "{{ codametrix_tools_cidr }}"

# Kubernetes autoscaling configuration
kubernetes_hpa:
  default:
    min_pods: 1
    max_pods: 10
  case_builder_service:
    min_pods: 2
    max_pods: 10
  claim_service:
    min_pods: 2
    max_pods: 10
  configuration_service:
    min_pods: 2
    max_pods: 10
  dictionary_service:
    min_pods: 2
    max_pods: 10
  documentation_service:
    min_pods: 2
    max_pods: 10
  exporter_service:
    min_pods: 2
    max_pods: 10
  importer_service:
    min_pods: 2
    max_pods: 10
  order_service:
    min_pods: 2
    max_pods: 10
  patient_service:
    min_pods: 2
    max_pods: 10
  process_service:
    min_pods: 2
    max_pods: 10
  user_service:
    min_pods: 2
    max_pods: 10

# Backup s3 bucket for elasticsearch
elasticsearch_index_rotation:
  application:
    domain_address: "elasticsearch.{{ env }}.application.codametrix.com"
    bucket: "es-bkup.{{ env }}.application.codametrix.com" # Note: bucket name doubles as the ES repository name
    cron_schedule_for_snapshot: "cron(15 23 * * ? *)"
    cron_schedule_for_deleting_indices: "cron(15 1 * * ? *)"
    vpc_id: aws_vpc.application_vpc.id
    subnet_id: aws_subnet.private_subnet_1.id
    indices:
      - regex_pattern: "^(logstash-|application-postgresql|mirth-postgresql|ingress-mirth-postgresql)"
        kind: regex
        days_to_keep: 30
      - regex_pattern: cloudtrail-
        kind: prefix
        days_to_keep: 90
  ingress:
    domain_address: "ingress-elasticsearch.{{ env }}.application.codametrix.com"
    bucket: "ingress-es-bkup.{{ env }}.application.codametrix.com" # Note: bucket name doubles as the ES repository name
    cron_schedule_for_snapshot: "cron(15 22 * * ? *)"
    cron_schedule_for_deleting_indices: "cron(15 0 * * ? *)"
    vpc_id: aws_vpc.ingress_vpc.id
    subnet_id: aws_subnet.ingress_private_subnet_1.id
    indices:
      - regex_pattern: "^(logstash-|application-postgresql|mirth-postgresql|ingress-mirth-postgresql)"
        kind: regex
        days_to_keep: 30
      - regex_pattern: cloudtrail-
        kind: prefix
        days_to_keep: 90

elasticsearch_index_rotation_lambda:
  lambda_function_dir: files/elasticsearch_lambda_function_build
  memory_size: 128
  timeout: 300
  pkg_path_source_code: elasticsearch_lambda_function
  pkg_function_name: rotate_elasticsearch_index_lambda
  pkg_runtime: python2.7

####################
# S3 Lifecycle Rules
####################
s3_lifecycle_incomplete_upload_days: 7
s3_lifecycle_logs_expiration_days: 720
s3_lifecycle_old_version_expiration_days: 180
s3_lifecycle_intelligent_tiering_days: 30
